// let markup;


// async function getPlants(query){
//   //let url = '{% url "plants:family_api" %}'
//   let url = '/plants/family_api'
//   //The below checks to see if you are on url /plants/  if you are it adjusts the urls below in `markup`
//   let pageUrl = window.location.pathname
//   let linkPath = "plants/";
//   if(pageUrl == '/plants/'){
//     linkPath = ""
//   }
//   const response = await fetch(url)
//   const jsonData = await response.json()
//   let species = await jsonData.species
//   if(query === "family"){
//     let groupedData = species.reduce((groups, line) => {
//       //if(line.family__family){
//         groups[line.family__family] = groups[line.family__family] || []
//         groups[line.family__family].push({
//           sci_name: line.genus + " " + line.species,
//           id: line.id,
//           image: line.image
//         })
//       //}
//       return groups
//     }, {})
//     function sortByKey(jsObj){
//         var sortedArray = [];

//         // Push each JSON Object entry in array by [key, value]
//         for(var i in jsObj)
//         {
//             sortedArray.push([i, jsObj[i]]);
//         }

//         // Run native sort function and returns sorted array.
//         return sortedArray.sort();
//     }
//     groupedData = sortByKey(groupedData)
//     markup = '<div class="flex-grid lrg-2 content-wrapper">'
//     for(let key in groupedData){
//       markup += `
//           <div class="family-list flex-grid-item">
//               <h2>${groupedData[key][0]}</h2>
//               <ul>
//                 ${groupedData[key][1].map(data => `<li><a href="${linkPath + data.id}">${data.sci_name}</a></li>`).join('')}
//               </ul>
//           </div>
//       `
//     }
//     markup += "</div>"

//   }else if(query === "commonName"){
//     species = species.sort((a,b)=>{
//       if(a.common_name != null & b.common_name !=null){
//         let a1 = a.common_name.toLowerCase();
//         let b1 = b.common_name.toLowerCase();
//         return a1<b1 ?-1:a1> b1? 1 :0;
//       }
//     })
//     markup = `
//       <ul class = "plant-list flex-grid lrg-3">
//         ${species.map(data => `<li class = "common_name flex-grid-item"><a href="${linkPath + data.id}">${data.common_name}</a></li>`).join('')}
//       </ul>
//     `
//   }else if(query==="symbol"){
//     markup = `
//       <ul class = "plant-list flex-grid lrg-3">
//         ${species.map(data => `<li class = "common_name flex-grid-item"><a href="${linkPath + data.id}">${data.symbol}</a></li>`).join('')}
//       </ul>
//     `
//   }else{
//     markup = `
//       <ul class = "plant-list flex-grid lrg-3">
//         ${species.map(data => `<li class = flex-grid-item><a href="${linkPath + data.id}">${data.genus + " " + data.species}</a></li>`).join('')}
//       </ul>
//     `
//   }
//   document.getElementById("plants-list").innerHTML = markup
// }
// getPlants("family");
// document.querySelectorAll(".sort-select").forEach(function(button){
//   button.addEventListener('click', function(event){
//     event.preventDefault();
//     let queryId = this.getAttribute('value');
//     getPlants(queryId)
//   }, false)
// })
const url = '/plants/family_api'

const plants = [];

fetch(url)
  .then(data=>data.json())
  .then(data=>{
    plants.push(...data.species)
    return data.species
  })
  .then(data => {
      const fullGroupedArray = familyKeyArray(data);
      const sortedPlants = sortByKey(fullGroupedArray);
      displayMatches(sortedPlants);
  })


function findMatches(wordToMatch, plants){
  return plants.filter(search=>{
    const regex = new RegExp(wordToMatch, 'gi');
    return search.family__family.match(regex) || search.genus.match(regex) || search.species.match(regex) 
  })
}
function familyKeyArray(plants){
  const groupedData = plants.reduce((groups, line) => {
    //if(line.family__family){
      groups[line.family__family] = groups[line.family__family] || []
      groups[line.family__family].push({
        sci_name: line.genus + " " + line.species,
        id: line.id,
        image: line.image,
        common_name: line.common_name,
        symbol: line.symbol
      })
    //}
    return groups
  }, {})
  return groupedData
}

function sortByKey(jsObj){
  return Object.keys(jsObj).sort().reduce(function (result, key) {
    result[key] = jsObj[key];
    return result;
  }, {});
  
}


function displayMatches(){
  const matchArray = findMatches(this.value, plants)
  const matchArrayGrouped = familyKeyArray(matchArray)
  const matchArrayFiltered = sortByKey(matchArrayGrouped)
  displayPlants(matchArrayFiltered);
}

function displayPlants(groupedArray){
  let markup2 = '<div>'
  for(let key of Object.keys(groupedArray)){
    markup2 += `
          <div class = "family-list">
              <h2>${key}</h2>
              <ul class = "card-list flex-grid lrg-3">
                ${groupedArray[key].map(data => `
                  <li class="species-card flex-grid-item">
                    <a href="../plants/${data.id}">
                      <div class="image-wrapper">
                        <img src="/media/${data.image}">
                      </div>
                      <div class="text-wrapper">
                      <h3>${data.sci_name}</h3>
                      <span class="extra-info">
                        <p class="common-name">${data.common_name}</p>
                        <p class="symbol">${data.symbol}</p>
                      </span>
                      </div>
                    </a>
                  </li>
                  `).join('')}
              </ul>
          </div>
      `
  }
  markup2 += '</div>'
  suggestions.innerHTML = markup2;
}

const searchInput = document.querySelector('.search');
const suggestions = document.querySelector('#plants-list')

searchInput.addEventListener('keyup', displayMatches)